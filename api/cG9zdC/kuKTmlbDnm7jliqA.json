{"title":"两数相加","date":"2018-11-07T07:36:49.289Z","slug":"两数相加","tags":["算法"],"updated":"2018-11-22T08:44:13.849Z","content":"<p>题目：</p>\n<pre><code>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的 两个 整数。\n你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。\n</code></pre><p>示例:</p>\n<pre><code>给定 nums = [2, 7, 11, 15], target = 9\n因为 nums[0] + nums[1] = 2 + 7 = 9\n所以返回 [0, 1]\n</code></pre><p>解题思路：</p>\n<ol>\n<li><p>遇到需要遍历数组的题目，我们第一反应是暴力枚举。<br>用两个for循环，从第一个数开始，加后面的数，当和为target时，输出数组下标。限制条件是两个数不能相同(<code>j=i+1</code>)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> twoSum = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums,target</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span> ,len=nums.length; i&lt;len ;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j=i+<span class=\"number\">1</span> ; j&lt;len ;j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums[i] + nums[j] == target)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> [i,j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>仔细想想，暴力枚举思路简单，容易做出来，但是代码复杂度为O(n^2),不够快。所以我们考虑一下优化代码。<br>需求是访问数组返回数组元素下标，我们可以联想到一种数据结构————哈希表（散列表），它是根据(key,value)<strong>直接</strong>访问内存存储位置。<br>思路：</p>\n<ol>\n<li>将nums数组存入hash表中，hash的key为nums数组的数值，hash的value为nums数组的下标</li>\n<li>遍历hash表，<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> twoSum = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums,target</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> hash =[];</span><br><span class=\"line\">  <span class=\"keyword\">var</span> temp;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>,len=nums.length ; i&lt;len ; ++i)&#123;</span><br><span class=\"line\">      temp = nums[i];</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(hash[temp] !== <span class=\"literal\">undefined</span>)&#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> [hash[temp],i];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      hash[target-temp] = i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ol>\n","next":{"title":"Hello World","slug":"hello-world"},"link":"https://yjvv.github.io/post/两数相加/","copyright":{"author":"yjvv","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\\\"https://creativecommons.org/licenses/by-nc-sa/4.0/\\\" rel=\\\"external nofollow noopener\\\" target=\\\"_blank\\\">CC BY-NC-ND 4.0</a>)"}}